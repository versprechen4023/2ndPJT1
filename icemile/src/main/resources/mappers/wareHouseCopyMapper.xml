<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="mes.icemile.mappers.wareHouseCopyMapper">
  
  
  	<!-- 원자재 재고 리스트 -->
  	<select id="getRawStockList" resultType="ems.icemile.dto.StockDTO">
		SELECT s.stock_code, r.raw_name, s.raw_code, r.raw_type, s.stock_status, 
       		   s.stock_amount, w.emp_num, w.wh_code, s.stock_date
		FROM raw_material r LEFT JOIN stock s 
		ON r.raw_code = s.raw_code
		LEFT JOIN warehouse w
		ON r.raw_code = w.raw_code
		LEFT JOIN in_material i
		ON w.wh_code = i.in_wh_code
		GROUP BY r.raw_code
  	</select>
  	
  	
  	<!-- 재고 삽입 -->
 	<insert id="insertRawStock" parameterType="ems.icemile.dto.StockDTO">
   	 	INSERT INTO stock(stock_code, 
   	 	<choose>
            <when test='type_type == "P"'>
                prod_code,
            </when>
            <when test='type_type == "R"'>
                raw_code,
            </when>
        </choose>
   	 	stock_date, stock_status, wh_code)
    	VALUES (#{stock_code}, #{raw_code}, #{stock_date}, #{stock_status}, #{wh_code})
	</insert>
    
    
    <!-- 재고 코드 부여 -->
    <select id="getNewStockCode" resultType="java.lang.String">
		SELECT stock_code
  		FROM stock
  		ORDER BY stock_code desc
  		LIMIT 1
	</select>
	
	
	<!-- 원자재 재고 수정 -->
	<update id="updateRawStock" parameterType="ems.icemile.dto.StockDTO">
		UPDATE stock
		SET stock_amount = #{stock_amount}, stock_date = now(), emp_num = #{emp_num}
		WHERE stock_code = #{stock_code}
	</update>
	
	
	<!-- 원자재 재고 수정 -->
	<update id="updateRawAmount" parameterType="ems.icemile.dto.InMaterialDTO">
		UPDATE stock
		SET stock_status = (SELECT in_amount
							FROM in_material
							WHERE in_code = #{in_code})
		WHERE raw_code = (SELECT raw_code
							FROM raw_material
							WHERE raw_name = (SELECT raw_name
											  FROM in_material
											  WHERE in_code = #{in_code}))
	</update>
	
	
	<!-- 원자재 재고 감하는 수정 -->
	<update id="updateRawSubtract" parameterType="ems.icemile.dto.WorkOrderDTO">
	UPDATE stock
    SET stock_status = stock_status - (
        SELECT req.req_amount * wo.order_amount
        FROM requirement req JOIN test_work_order wo
        ON req.prod_name = wo.prod_name
        WHERE wo.work_code = #{work_code})
    WHERE raw_code = (SELECT raw_code 
    					  FROM requirement
    					  WHERE prod_name = (SELECT prod_name
    									 	  FROM test_work_order
    									 	  WHERE work_code = #{work_code}))

	</update>
	
	
	<!-- 원자재 재고 검색 -->
	<select id="rawStockSearch" resultType="ems.icemile.dto.StockDTO">
	<bind name="content" value="'%' + content + '%'"/>
		SELECT s.*, r.raw_name, r.raw_type
		FROM stock s LEFT JOIN raw_material r
		ON s.raw_code = r.raw_code
		WHERE ${category} LIKE #{content}
	</select>
	
	
	<!-- 완제품 재고 리스트 -->
  	<select id="getProdStockList" resultType="ems.icemile.dto.StockDTO">
		SELECT s.stock_code, p.prod_name, p.prod_code, p.prod_taste, s.stock_status, 
       		   s.stock_amount, w.emp_num, w.wh_code, s.stock_date
		FROM product p LEFT JOIN stock s 
		ON p.prod_code = s.prod_code
		LEFT JOIN warehouse w
		ON p.prod_code = w.prod_code
		LEFT JOIN result re
		ON p.prod_name = re.prod_name
  	</select>
  	
  	
  	<!-- 완제품 재고 수정 -->
	<update id="updateProdStock" parameterType="ems.icemile.dto.StockDTO">
		UPDATE stock
		SET stock_amount = #{stock_amount}, wh_code = #{wh_code}, stock_date = now(), emp_num = #{emp_num}
		WHERE stock_code = #{stock_code}
	</update>
	
	
	<!-- 완제품 재고 수정 -->
	<update id="updateProdAmount" parameterType="ems.icemile.dto.ResultDTO">
		UPDATE stock
		SET stock_status = (SELECT good_prod
							FROM result
							ORDER BY result_code DESC
							LIMIT 1)
		WHERE prod_code = (SELECT prod_code
							FROM product
							WHERE prod_name = (SELECT prod_name
											   FROM result
											   ORDER BY result_code DESC
											   LIMIT 1))
	</update>
	
	
	<!-- 완제품 재고 감하는 수정 -->
	<update id="updateProdSubtract" parameterType="ems.icemile.dto.outMaterialInsertDTO">
		UPDATE stock
		SET stock_status = stock_status - (
			SELECT out_amount
			FROM out_material
			WHERE out_code = #{out_code})
		WHERE stock_code = #{stock_code}
	</update>

	
	
	<!-- 완제품 재고 검색 -->
	<select id="prodStockSearch" resultType="ems.icemile.dto.StockDTO">
	<bind name="content" value="'%' + content + '%'"/>
		SELECT s.*, p.prod_name, p.prod_taste
		FROM stock s LEFT JOIN product p
		ON s.prod_code = p.prod_code
		WHERE ${category} LIKE #{content}
	</select>
  	
  
 </mapper>
  