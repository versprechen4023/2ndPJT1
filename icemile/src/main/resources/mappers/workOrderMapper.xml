<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ems.icemile.mappers.workOrderMapper">

  
<!--  <select id="workOrderList" resultType="ems.icemile.dto.WorkOrderDTO">
  	SELECT 
    wo.work_code,
    wo.emp_num,
    f.line_code,
    f.line_name,
    wo.order_code,
    p.workd_name,
    o.order_amount,
    f.line_process,
    wo.work_order_date,
    b.branch_code
	FROM work_order wo
	INNER JOIN facility f ON wo.line_code = f.line_code
	INNER JOIN orders o ON wo.order_code = o.order_code
	INNER JOIN workduct p ON o.workd_name = p.workd_name
	INNER JOIN branch b ON o.branch_code = b.branch_code
  </select>  나중에 실제로 외래키 걸고 가져와야할 컬럼 구문 -->

	<select id="workOrderList" resultType="ems.icemile.dto.WorkOrderDTO">
  	SELECT *
  	FROM test_work_order 
  	</select>  <!-- 입력을 위한 임의의 test_work_order 테이블 새로 생성 -->


	<select id="getWorkCode" resultType="java.lang.String">
  	SELECT work_code
  	FROM test_work_order
  	ORDER BY work_code desc 
  	LIMIT 1
    </select>

	<!-- <insert id="workOrderAdd"> 후에 test테이블 변경
  	INSERT INTO test_work_order(work_code, emp_num, line_code, line_name, order_code, workd_name, 
  					order_amount, line_process, work_order_date, branch_code)
  	VALUES(CONCAT('WO', LPAD(#{work_code}, 4, '0')),#{emp_num}, #{line_code}, 
  			#{line_name}, #{order_code}, #{workd_name}, #{order_amount},#{line_process},
  			#{work_order_date}, #{branch_code})
 	 </insert> -->
	
	<insert id="workOrderAdd">
    <!-- work_order_date 컬럼을 명시적으로 지정하지 않고 현재 시간 사용 / 후에 test테이블 변경. 변경시에 insert 구문 변경-->
    INSERT INTO test_work_order(work_code, emp_num, line_code, line_name, order_code, prod_name, 
        order_amount, line_process, work_order_date, branch_code)
    VALUES(CONCAT('WO', LPAD(#{work_code}, 4, '0')), #{emp_num}, #{line_code}, 
        #{line_name}, #{order_code}, #{prod_name}, #{order_amount}, #{line_process},
        NOW(), #{branch_code})
	</insert>
	
	<update id="proOrderProgress">
		UPDATE orders
			SET order_status = 2
				WHERE order_code = #{order_code}
	</update>
	
	<select id="getWorkOrderInfo" resultType="ems.icemile.dto.WorkOrderDTO">
  	SELECT *
  	FROM test_work_order
  	WHERE work_code = #{work_code}
  </select>
  	
  	 <update id="workOrderUpdate">
  	UPDATE test_work_order
  	SET emp_num = #{emp_num}, line_code = #{line_code}, line_name = #{line_name},
  					order_code = #{order_code}, prod_name = #{prod_name}, 
  					order_amount = #{order_amount}, line_process = #{line_process}, 
  					work_order_date = NOW(), branch_code = #{branch_code} 
   	WHERE work_code = #{work_code}
  </update>
  
  	<delete id="workOrderDelete">
  	DELETE FROM test_work_order
  	WHERE work_code = #{work_code}
  </delete>
  
   <select id="workOrderSearch" resultType="ems.icemile.dto.WorkOrderDTO">
    <bind name="content" value="'%' + content + '%'"/>
    SELECT *
    FROM test_work_order
    WHERE ${category} LIKE #{content}
    <choose>
        <when test="workOrderBegin != null and workOrderBegin != ''">
            AND work_order_date &gt;= #{workOrderBegin}
        </when>
    </choose>
    <choose>
        <when test="workOrderEnd != null and workOrderEnd != ''">
            AND work_order_date &lt;= #{workOrderEnd}
        </when>
    </choose>
    <choose>
        <when test="workOrderDoneBegin != null and workOrderDoneBegin != ''">
            AND done_date &gt;= #{workOrderDoneBegin}
        </when>
    </choose>
    <choose>
        <when test="workOrderDoneEnd != null and workOrderDoneEnd != ''">
            AND done_date &lt;= #{workOrderDoneEnd}
        </when>
    </choose>
</select>


	<update id="workOrderDone" parameterType="String">
    UPDATE test_work_order
    SET done_date = NOW()
    WHERE work_code = #{work_code}
</update>
	
	<update id="proOrderDone" parameterType="String">
		UPDATE orders
			SET order_status = 3
				WHERE order_code = (SELECT order_code
										FROM test_work_order
											WHERE work_code = #{work_code})
	</update>
	



</mapper>